---
// Optimized Image Component for better performance
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';
  class?: string;
  sizes?: string;
  priority?: boolean;
}

const { 
  src, 
  alt, 
  width, 
  height, 
  loading = 'lazy', 
  class: className,
  sizes = '(max-width: 768px) 100vw, 800px',
  priority = false
} = Astro.props;

// Generate multiple image sizes for responsive loading
const imageSizes = width ? [
  { width: Math.round(width * 0.5), suffix: 'sm' },
  { width: Math.round(width * 0.75), suffix: 'md' },
  { width: width, suffix: 'lg' }
] : [];

// Create srcset for responsive images
const createSrcSet = (baseSrc: string) => {
  if (!baseSrc.startsWith('/') || baseSrc.includes('?')) {
    return ''; // External URLs or already processed
  }
  
  const [path, ext] = baseSrc.split(/\.([^.]+)$/);
  return imageSizes
    .map(size => `${path}-${size.suffix}.${ext} ${size.width}w`)
    .join(', ');
};

const srcset = createSrcSet(src);
---

<img
  src={src}
  alt={alt}
  width={width}
  height={height}
  loading={priority ? 'eager' : loading}
  decoding="async"
  fetchpriority={priority ? 'high' : 'auto'}
  class={className}
  sizes={sizes}
  srcset={srcset || undefined}
/>

<style>
  img {
    /* Smooth loading transition */
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  img[src] {
    opacity: 1;
  }
  
  /* Skeleton loading effect */
  img:not([src]) {
    background: linear-gradient(90deg, #2a2a2a 25%, #333 50%, #2a2a2a 75%);
    background-size: 200% 100%;
    animation: skeleton-loading 1.5s infinite;
  }
  
  @keyframes skeleton-loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }
</style>
